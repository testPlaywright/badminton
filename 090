// cypress.config.js
const { defineConfig } = require('cypress');
const fs = require('fs');
const { queryDb } = require('./cypress/plugins/ConnectDB.cjs');
const ExcelJS = require('exceljs'); // kept for readErrorExcelExcelJS
const path = require('path');
const cucumber = require('cypress-cucumber-preprocessor').default;
const dayjs = require('dayjs');
const XlsxPopulate = require('xlsx-populate');

const envJson = JSON.parse(fs.readFileSync('cypress.env.json', 'utf-8'));

// ===== Template settings (from your sheet screenshots) =====
const TEMPLATE_FILE  = 'intentTemplate.xlsx';   // in cypress/fixtures
const TEMPLATE_SHEET = 'CAT Automated';         // tab name
const HEADER_ROW     = 9;                       // header row index
const FIRST_DATA_ROW = 10;                      // first data row to write

// --- utilities for forgiving header/key matching ---
function toKey(s) {
  return String(s || '').toLowerCase().replace(/[\s_\-]/g, '');
}

// map incoming example keys to header keys if they differ
function normalizeIncomingKey(k) {
  const key = toKey(k);
  const alias = {
    pdlmrow: 'pdlmrow',
    edittype: 'edittype',
    listids: 'listids',
    lobcodes: 'lobcodes',
    producttype: 'producttype',
    productid: 'productid',
    // add any more aliases here if you introduce new columns
  };
  return alias[key] || key;
}

// read header texts from a row without relying on non-existent APIs
function readHeaderTexts(sheet, headerRow, maxCols = 300, blankHysteresis = 10) {
  const headers = [];
  let blanks = 0, started = false;
  for (let c = 1; c <= maxCols; c++) {
    const v = sheet.cell(headerRow, c).value();
    const text = (v == null) ? '' : String(v).trim();
    if (text) {
      headers.push(text);
      started = true;
      blanks = 0;
    } else if (started) {
      if (++blanks >= blankHysteresis) break;
    }
  }
  return headers;
}

async function makeXlsxWithPopulate(rows, outName) {
  const templatePath = path.join(__dirname, 'cypress', 'fixtures', TEMPLATE_FILE);
  const downloadsDir = path.join(__dirname, 'cypress', 'downloads');
  if (!fs.existsSync(downloadsDir)) fs.mkdirSync(downloadsDir, { recursive: true });

  const fileName = outName || 'CLINICAL_INTENT.xlsx';
  const outPath  = path.join(downloadsDir, fileName);

  const wb    = await XlsxPopulate.fromFileAsync(templatePath);
  const sheet = wb.sheet(TEMPLATE_SHEET);
  if (!sheet) throw new Error(`Sheet "${TEMPLATE_SHEET}" not found in ${TEMPLATE_FILE}`);

  const headers = readHeaderTexts(sheet, HEADER_ROW);
  const headerToCol = {};
  headers.forEach((h, idx) => (headerToCol[toKey(h)] = idx + 1));

  // one-time debug (appears in terminal)
  if (!makeXlsxWithPopulate._logged) {
    console.log('[CAT] headers:', headers);
    console.log('[CAT] header keys:', headers.map(toKey));
    makeXlsxWithPopulate._logged = true;
  }

  let r = FIRST_DATA_ROW;
  (rows && rows.length ? rows : [{}]).forEach((rowObj) => {
    Object.entries(rowObj || {}).forEach(([k, v]) => {
      const col = headerToCol[normalizeIncomingKey(k)];
      if (col) sheet.cell(r, col).value(v);
    });
    r++;
  });

  await wb.toFileAsync(outPath);
  return { fileName: path.basename(outPath), fullPath: outPath };
}

module.exports = defineConfig({
  // (fix casing) you previously had defaultCommandTimeOut
  defaultCommandTimeout: 300000,
  reporter: 'cypress-mochawesome-reporter',
  reporterOptions: {
    charts: true,
    json: true,
    saveJson: true,
    reportDir: process.env.REPORT_PATH,
    overwrite: false,
    reportFilename: 'index',
    reportPageTitle: 'CAT Automation Report',
    reportTitle: 'CAT Automation Regression Report',
    inlineAssets: true,
    html: true,
    saveHtml: true,
    embeddedScreenshots: true,
    saveAllAttempts: false
  },
  'cypress-cucumber-preprocessor': {
    nonGlobalStepDefinitions: true,
    stepDefinitions: './cypress/e2e/stepdefinitions'
  },
  e2e: {
    supportFile: 'cypress/support/e2e.js',
    chromeWebSecurity: false,
    experimentalRunAllSpecs: true,
    experimentalSessionAndOrigin: true,

    setupNodeEvents(on, config) {
      console.log('Cypress REPORT_PATH:', process.env.REPORT_PATH);
      on('file:preprocessor', cucumber());
      require('cypress-mochawesome-reporter/plugin')(on);

      // merge all tasks so none are overridden
      on('task', {
        // util
        log(args) { console.log(...args); return null; },

        // DB passthrough
        queryDb({ query, values }) { return queryDb(query, values); },

        // read error workbook (kept from your code)
        async readErrorExcelExcelJS(fileName) {
          const filePath = path.join(__dirname, 'cypress', 'downloads', fileName);
          const workbook = new ExcelJS.Workbook();
          await workbook.xlsx.readFile(filePath);

          const sheet = workbook.getWorksheet('ValidationErrors') || workbook.worksheets[0];
          const rows = [];
          sheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {
            if (rowNumber === 1) return;
            rows.push({
              ticketId: row.getCell(1).value,
              field: row.getCell(4).value,
              errorMessage: row.getCell(6).value
            });
          });
          return rows;
        },

        // write intent excel from single row (@intentRow)
        async 'intent:makeFile'({ row, outName, filename }) {
          const name = outName || filename;
          return makeXlsxWithPopulate([row || {}], name);
        },

        // write intent excel from multiple rows (@intentRows)
        async 'intent:makeFileMany'({ rows, outName, filename }) {
          const name = outName || filename;
          return makeXlsxWithPopulate(rows || [], name);
        }
      });

      return config;
    },

    include: ['./node_modules/cypress', 'cypress/**/*.js'],
    specPattern: 'cypress/e2e/**/*.feature',
    env: {
      BASE_URL: process.env.BASE_URL,
      uploadFileName: envJson.uploadFileName,
      TAGS: 'not @ignore'
    },
    retries: 1
  },

  component: {
    setupNodeEvents(on, config) {
      return require('./cypress/plugins/index.js')(on, config);
    }
  }
});