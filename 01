name: Cypress E2E Test Run

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      target_env:
        description: 'Select environment to test'
        required: true
        default: 'DEV'
        type: choice
        options:
          - DEV
          - TEST

permissions:
  contents: read
  actions: read

jobs:
  test:
    runs-on: uhg-runner

    strategy:
      matrix:
        ENV_NAME: ${{ fromJson(format('["{0}"]', github.event.inputs.target_env || 'TEST')) }}

    steps:
      - name: Skip non-selected environment (manual trigger only)
        if: github.event_name == 'workflow_dispatch' && matrix.ENV_NAME != github.event.inputs.target_env
        run: echo "Skipping environment ${{ matrix.ENV_NAME }} because target_env is ${{ github.event.inputs.target_env }}."
        shell: bash

      - name: Cleanup
        run: sudo chown -R $USER:$USER $GITHUB_WORKSPACE

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Installing Cypress Dependencies and xvfb
        if: runner.os == 'Linux'
        run: |
          wget https://repo1.uhc.com/artifactory/security-ubuntu-cache/ubuntu/pool/main/x/xorg-server/xserver-common_21.1.4-2ubuntu1.7~22.04.9_all.deb -O /tmp/xserver-common.deb
          wget https://repo1.uhc.com/artifactory/security-ubuntu-cache/ubuntu/pool/universe/x/xorg-server/xvfb_21.1.3-2ubuntu2.9_amd64.deb -O /tmp/xvfb.deb
          sudo apt-get update
          sudo apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2t64 libxtst6 xauth /tmp/xserver-common.deb /tmp/xvfb.deb
          rm /tmp/xserver-common.deb /tmp/xvfb.deb

      - name: npm Install
        run: |
          npm config set registry https://repo1.uhc.com/artifactory/api/npm/npm-virtual/
          npm install

      - name: Set Environment Variables for ${{ matrix.ENV_NAME }}
        run: |
          if [ "${{ matrix.ENV_NAME }}" = "DEV" ]; then
            echo "BASE_URL=${{ secrets.DEV_BASE_URL }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.DEV_ADMIN_USERNAME }}" >> $GITHUB_ENV
            echo "PASSWORD=${{ secrets.DEV_ADMIN_PASSWORD }}" >> $GITHUB_ENV
          elif [ "${{ matrix.ENV_NAME }}" = "TEST" ]; then
            echo "BASE_URL=${{ secrets.TEST_BASE_URL }}" >> $GITHUB_ENV
            echo "USERNAME=${{ secrets.TEST_ADMIN_USERNAME }}" >> $GITHUB_ENV
            echo "PASSWORD=${{ secrets.TEST_ADMIN_PASSWORD }}" >> $GITHUB_ENV
          fi

      - name: Run Cypress Tests on ${{ matrix.ENV_NAME }}
        run: |
          if [ "${{ matrix.ENV_NAME }}" = "DEV" ]; then
            echo "Running Cypress tests on DEV environment"
            npx cypress run --spec "cypress/e2e/features/tickets/ticket.feature" --env BASE_URL=$BASE_URL,USERNAME=$USERNAME,PASSWORD=$PASSWORD
          else
            echo "Running Cypress tests on TEST environment"
            npx cypress run --env BASE_URL=$BASE_URL,USERNAME=$USERNAME,PASSWORD=$PASSWORD
          fi

      - name: Create Cypress Reports Directory
        id: date
        if: always()
        run: |
          REPORT_DATE=$(date +'%Y-%m-%d')
          mkdir -p cypress/reports/${REPORT_DATE}
          echo "date=$REPORT_DATE" >> $GITHUB_ENV
          echo "::set-output name=date::${REPORT_DATE}"

      - name: Final Summary
        run: echo "✅ Cypress Tests Completed Successfully on ${{ matrix.ENV_NAME }}"

      - name: Automation Summary
        id: automation-summary
        shell: bash
        if: always()
        run: |
          day=$(date +'%Y-%m-%d')
          mkdir -p cypress/reports/${day}
          stats="$(jq -s 'reduce .[] as $item ({"passes":0,"failures":0,"pending":0,"skipped":0}; 
            .passes += ($item.stats.passes // 0) |
            .failures += ($item.stats.failures // 0) |
            .pending += ($item.stats.pending // 0) |
            .skipped += ($item.stats.skipped // 0))' cypress/reports/${day}/*.json)"

          passed=$(echo $stats | jq '.passes')
          failed=$(echo $stats | jq '.failures')
          pending=$(echo $stats | jq '.pending')
          skipped=$(echo $stats | jq '.skipped')
          total=$((passed + failed + pending + skipped))

          echo "### ✅ CAT Automation Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Total Test Cases | $total |" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Passed | $passed |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ Failed | $failed |" >> $GITHUB_STEP_SUMMARY
          echo "| ⏸️ Pending | $pending |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔕 Skipped | $skipped |" >> $GITHUB_STEP_SUMMARY

      - name: Cypress Reports with Screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: report
          path: |
            ./cypress/screenshots
            ./cypress/reports/${{ steps.date.outputs.date }}

      - name: Deploy to the object storage bucket
        if: always()
        uses: uhg-pipelines/epl-microsite/deploy/s3docs@dcf44c3b4e36255e9888967c09696f8b38aab3ea
        with:
          bucket-name: 'orx-cat-ar'
          build-directory: './cypress/reports/${{ steps.date.outputs.date }}'
          aws-access-key-id: '${{ secrets.ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.SECRET_ACCESS_KEY }}'

      - name: Print Report URL
        if: always()
        run: |
          echo "### 🌐 Report Deployed" >> $GITHUB_STEP_SUMMARY
          echo "📅 Date: ${{ steps.date.outputs.date }}" >> $GITHUB_STEP_SUMMARY
          echo "🌍 Env: ${{ matrix.ENV_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [Click to View Report](https://orx-cat-ar.s3docs.optum.com/index.html)" >> $GITHUB_STEP_SUMMARY
