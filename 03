const { defineConfig } = require('cypress');
const fs = require('fs');
const { queryDb } = require('./cypress/plugins/ConnectDB.cjs');
const ExcelJS = require('exceljs');            // keep for readErrorExcelExcelJS
const path = require('path');
const cucumber = require('cypress-cucumber-preprocessor').default;
const dayjs = require('dayjs');
const XlsxPopulate = require('xlsx-populate'); // <-- add this

const envJson = JSON.parse(fs.readFileSync('cypress.env.json', 'utf-8'));

module.exports = defineConfig({
  // (optional) Cypress key is defaultCommandTimeout (lowercase t); you had defaultCommandTimeOut
  defaultCommandTimeout: 300000,               // <-- small fix (optional)
  reporter: 'cypress-mochawesome-reporter',
  reporterOptions: {
    charts: true,
    json: true,
    saveJson: true,
    reportDir: process.env.REPORT_PATH,
    overwrite: false,
    reportFilename: 'index',
    reportPageTitle: 'CAT Automation Report',
    reportTitle: 'CAT Automation Regression Report',
    inlineAssets: true,
    html: true,
    saveHtml: true,
    embeddedScreenshots: true,
    saveAllAttempts: false
  },
  'cypress-cucumber-preprocessor': {
    nonGlobalStepDefinitions: true,
    stepDefinitions: './cypress/e2e/stepdefinitions'
  },
  e2e: {
    supportFile: 'cypress/support/e2e.js',
    chromeWebSecurity: false,
    experimentalRunAllSpecs: true,
    experimentalSessionAndOrigin: true,

    setupNodeEvents(on, config) {
      console.log("Cypress REPORT_PATH:", process.env.REPORT_PATH);
      on('file:preprocessor', cucumber());
      require('cypress-mochawesome-reporter/plugin')(on);

      // ---- helper used by both tasks; writes rows to a copy of fixtures/intentTemplate.xlsx
      async function makeXlsxWithPopulate(rows, outName) {
        const projectRoot = __dirname;
        const templatePath = path.join(projectRoot, 'cypress', 'fixtures', 'intentTemplate.xlsx');
        const downloadsDir = path.join(projectRoot, 'cypress', 'downloads');
        if (!fs.existsSync(downloadsDir)) fs.mkdirSync(downloadsDir, { recursive: true });

        const fileName = outName || 'CLINICAL_INTENT.xlsx';
        const fullPath = path.join(downloadsDir, fileName);

        const wb = await XlsxPopulate.fromFileAsync(templatePath);
        const sheet = wb.sheet(0);

        // Header names in Row 1 must match keys in the provided row objects
        const header = sheet.row(1).cells().map(c => String(c.value() ?? '').trim());
        const startRow = 2;

        (rows || []).forEach((rowObj, i) => {
          const r = startRow + i;
          header.forEach((h, colIdx) => {
            if (!h) return;
            if (rowObj && Object.prototype.hasOwnProperty.call(rowObj, h)) {
              sheet.cell(r, colIdx + 1).value(rowObj[h]);
            }
          });
        });

        await wb.toFileAsync(fullPath);
        return { fileName, fullPath };
      }

      // MERGED task handler (so nothing gets overridden)
      on('task', {
        // --- your existing utility tasks
        log(args) {
          console.log(...args);
          return null;
        },

        queryDb({ query, values }) {
          return queryDb(query, values);
        },

        async readErrorExcelExcelJS(fileName) {
          const filePath = path.join(__dirname, 'cypress', 'downloads', fileName);
          const workbook = new ExcelJS.Workbook();
          await workbook.xlsx.readFile(filePath);

          const sheet = workbook.getWorksheet('ValidationErrors') || workbook.worksheets[0];
          const rows = [];
          sheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {
            if (rowNumber === 1) return;
            rows.push({
              ticketId: row.getCell(1).value,
              field: row.getCell(4).value,
              errorMessage: row.getCell(6).value
            });
          });
          return rows;
        },

        // --- NEW: write XLSX before upload (single row)
        async 'intent:makeFile'({ row, outName }) {
          const data = Array.isArray(row) ? row[0] : row;
          return makeXlsxWithPopulate([data || {}], outName);
        },

        // --- NEW: write XLSX before upload (many rows)
        async 'intent:makeFileMany'({ rows, outName }) {
          return makeXlsxWithPopulate(rows || [], outName);
        }
      });

      return config;
    },

    include: ['./node_modules/cypress', 'cypress/**/*.js'],
    specPattern: 'cypress/e2e/**/*.feature',
    env: {
      BASE_URL: process.env.BASE_URL,
      uploadFileName: envJson.uploadFileName,
      TAGS: 'not @ignore'
    },
    retries: 1
  },

  component: {
    setupNodeEvents(on, config) {
      return require('./cypress/plugins/index.js')(on, config);
    }
  }
});